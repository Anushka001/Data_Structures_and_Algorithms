/* Problem Statement
You are given a string 'STR' containing lowercase English letters from a to z inclusive. Your task is to find all non-empty possible subsequences of 'STR'.
A Subsequence of a string is the one which is generated by deleting 0 or more letters from the string and keeping the rest of the letters in the same order.

Input Format:
The first line of input contains an integer ‘T’ denoting the number of test cases. Then T test cases follow.
The first and only line of each test case contains string 'STR'. 

Output Format
For each test case, print the subsequences of the string 'STR' separated by space.
The output of each test case is printed in a separate line.
The output strings can be returned in any order.  */

#include <iostream>
#include <vector>
using namespace std;

void solve (string str, string output, int index, vector<string>& ans){
    //base case
    if(index >= str.length()){
        if(output.length() > 0){
          ans.push_back(output);  
        }
        return;
    }
    
    //exclude
    solve(str, output, index+1, ans);
    
    //include
    char elem = str[index];
    output.push_back(elem);
    solve(str, output, index+1, ans);
}

vector<string> subsequences(string str){
	
	vector<string> ans;
    string output = "";
    int index = 0;
    solve(str, output, index, ans);
    return ans;
	
}

int main() {}